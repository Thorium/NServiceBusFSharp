{"name":"Nservicebusfsharp","tagline":"Demo how to use NServiceBus from F-Sharp","body":"This is simple demo how to use NServiceBus from F-Sharp (F#) programming language.\r\n\r\n(Ensure first that you have NServiceBus and F# installed...)\r\n\r\nFSharp is a multi-paradigm programming language, targeting the .NET Framework.\r\n\r\nNServiceBus is service bus for .NET (based on MSMQ and RavenDB).\r\nhttps://github.com/NServiceBus/NServiceBus\r\n\r\nDescription of the solution:\r\nEvents.fs - Events, currently only one, MyEvent that is sent to message bus. Has one parameter.\r\nMyEventHandler.fs - Example of listener/processor who handles the event (and usually would send a new one(s) after done). This could be a state machine state.\r\nNServiceBusInstaller.fs - Castle Windsor IoC container registration\r\nProgram.fs - Small infra to launch the first event\r\nApp.config - NServiceBus, Castle & MSMQ settings\r\npackages.config - Nuget package management settings\r\n\r\nThis solution uses NuGet, but there seems to be some problems with NuGet and VS2012 automation still...\r\nThis could be enough for the package management console: Install-Package NServiceBus.CastleWindsor 3.3.3\r\nas the NServiceBus.CastleWindsor will have dependency to NServiceBus and Castle Windsor.\r\n\r\nWhy to use NServiceBus from F# when we have MailboxProcessors?\r\n - Usually I won't but... How about communication with already existing C# SOA architecture...\r\n - By default F# MailboxProcessor can't do recovery (from e.g. some kind of hardware failure)\r\n - Actor/Agents-model and message based communication are very similar!\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}